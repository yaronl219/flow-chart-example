{"version":3,"sources":["reportWebVitals.js","store/reducers/sidebarReducer.js","store/reducers/graphReducer.js","store/reducers/rootReducer.js","store/store.js","services/mapService.js","store/actions/graphActions.js","cmps/MapNode.jsx","pages/MapContainer.jsx","cmps/SidebarContainer.jsx","cmps/NodeGenerator.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isSidebarOpen","graphData","selectedNodes","rootReducer","combineReducers","sidebarReducer","state","action","type","payload","graphReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","_createMockData","numberOfEvents","numberOfColumns","vertices","i","_createMockVertice","columns","edges","_createMockEdge","key","mockEdge","rand","getRandomInt","col","shouldDiverge","console","log","data","graph","Vertices","Edges","chancesOfDivergence","from","to","id","min","max","Math","floor","random","mapService","getGraphData","a","nodeAmount","setGraphData","amount","dispatch","MapNode","connect","selected","useState","isPartOfSelectedVariant","setIsPartOfSelectedVariant","useEffect","isSelected","find","node","Id","style","borderRadius","height","width","border","display","alignItems","justifyContent","flexDirection","position","mapDispatchToProps","setSelectedNodes","MapContainer","displayMapData","setDisplayMapData","isLoading","setIsLoading","mapData","useRef","time","instance","current","Date","now","parseMapData","setLayoutAndRender","callback","setTimeout","requestAnimationFrame","_displayMap","elements","direction","nodeWidth","nodeHeight","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","forEach","el","isNode","setNode","setEdge","source","target","layout","_elements","map","nodeWithPosition","targetPosition","sourcePosition","x","y","getLayoutedElements","startTime","_parsedMapData","graphRawData","Object","values","edge","edgeData","From","To","push","nodeData","nodeTypes","special","onClick","toObject","connectionLineType","onSelectionChange","variantNodes","onTraverse","getLastChild","outgoers","getOutgoers","length","firstParent","getFirstParent","incomers","getIncomers","incomerChildren","lastChild","traverseBranch","variant","getVariantEdges","onlyRenderVisibleElements","minZoom","onLoad","ev","SidebarContainer","NodeGenerator","amountOfNodes","setAmountOfNodes","value","onChange","isNaN","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62d5f076.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-anonymous-default-export */\nconst initialState = {\n    isSidebarOpen: true\n};\n\nexport default function(state = initialState, action = {}) {\n    switch (action.type) {\n        case 'SET_SIDEBAR_OPEN':\n            const {isSidebarOpen} = action.payload\n            return { ...state, isSidebarOpen };\n\n        default:\n            return state;\n    }\n}\n\n","/* eslint-disable import/no-anonymous-default-export */\nconst initialState = {\n    graphData: null,\n    selectedNodes: null\n};\n\nexport default function (state = initialState, action = {}) {\n    switch (action.type) {\n        case 'SET_GRAPH_DATA':\n            const { graphData } = action.payload\n            return { ...state, graphData };\n\n        case 'SET_SELECTED_NODES':\n            const { selectedNodes } = action.payload\n            return { ...state, selectedNodes }\n        default:\n            return state;\n    }\n}\n\n","import { combineReducers } from 'redux';\nimport sidebarReducer from \"./sidebarReducer\";\nimport graphReducer from \"./graphReducer\";\n\nconst rootReducer = combineReducers({\n    sidebarReducer,\n    graphReducer\n})\n\nexport default rootReducer;\n","\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer.js';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n","\nconst getGraphData = async (nodeAmount = 100) => {\n    return _createMockData(nodeAmount,3)\n}\n\nfunction _createMockData(numberOfEvents = 10, numberOfColumns = 1) {\n    const vertices = {}\n    for (let i = 0; i < numberOfEvents; i++) {\n        vertices[i] = _createMockVertice(i+1)\n    }\n\n    const columns = []\n\n    for (let i=0; i< numberOfColumns; i++) {\n        columns[i] = null\n    }\n\n    const edges = {}\n    let {key,mockEdge} = _createMockEdge(1,2)\n    edges[key] = mockEdge\n    for (let i = 1; i < numberOfEvents - 1; i++) {\n        // select random column\n        // debugger\n        const rand = getRandomInt(0,numberOfColumns)\n        const col = columns[rand] ? columns[rand] : i+1\n        let {key,mockEdge} = _createMockEdge(col,i+2)\n        edges[key] = mockEdge\n        if (shouldDiverge(10)) {\n            columns[rand] = i+1\n        }\n    }\n    console.log('finished creating data')\n    return {\n        data: [\n            {\n                graph: {\n                    Vertices: vertices,\n                    Edges: edges\n                }\n            }\n        ]\n    }\n}\n\nfunction shouldDiverge(chancesOfDivergence) {\n    \n    const chance = getRandomInt(0,100)\n    if (chance >= chancesOfDivergence) return true\n    return false\n}\n\nfunction _createMockEdge(from, to) {\n    const key = `<${from},${to}>`\n    const mockEdge = {\n        \"Id\": key,\n        \"From\": {\n            \"Id\": `${from}`\n        },\n        \"To\": {\n            \"Id\": `${to}`\n        }\n    }\n\n    return {key, mockEdge}\n}\n\nfunction _createMockVertice(id) {\n    return {\n        \"Id\": `${id}`,\n        \"Properties\": {\n\n        },\n        \"Type\": getRandomInt(1, 15),\n        \"WindowID\": 4,\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * max) + min\n}\nexport const mapService = {\n    getGraphData\n}\n","import { mapService } from \"../../services/mapService\"\n\nexport function setGraphData(amount) {\n    return async dispatch => {\n        const graphData = await mapService.getGraphData(amount)\n        dispatch({type: 'SET_GRAPH_DATA', payload: {graphData}})\n    }\n}\n\nexport function setSelectedNodes(selectedNodes) {\n    return dispatch => {\n        dispatch({type: 'SET_SELECTED_NODES', payload: {selectedNodes}})\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { Handle } from 'react-flow-renderer'\nimport { connect } from 'react-redux'\n\nfunction _MapNode({selectedNodes, data, selected}) {\n\n    const [isPartOfSelectedVariant, setIsPartOfSelectedVariant] = useState(false)\n\n    useEffect(() => {\n        if (!selectedNodes) return setIsPartOfSelectedVariant(false)\n        const isSelected = !!selectedNodes.find(node => node.id === data.Id)\n        setIsPartOfSelectedVariant(isSelected)\n    }, [selectedNodes, data.Id])\n\n    return (\n        <div style={{ borderRadius: '50%', height: 50, width: 50, border: '1px solid black', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n            <Handle type=\"source\" position=\"bottom\" />\n            <div>{data.Id}</div>\n            <div>{selected && 'selected'}</div>\n            <div>{isPartOfSelectedVariant && 'variant'}</div>\n            <Handle type=\"target\" position=\"top\" />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { selectedNodes } = state.graphReducer\n    return {\n        selectedNodes\n    };\n};\n\nconst mapDispatchToProps = {\n    \n}\n\nexport const MapNode = connect(mapStateToProps, mapDispatchToProps)(_MapNode)\n","import React, { useEffect, useRef, useState } from 'react'\nimport { connect } from 'react-redux';\nimport { setGraphData, setSelectedNodes } from '../store/actions/graphActions'\nimport dagre from 'dagre'\nimport ReactFlow, { isNode, MiniMap, getIncomers, getOutgoers } from 'react-flow-renderer';\nimport { MapNode } from '../cmps/MapNode';\n\nfunction _MapContainer({ setGraphData, graphData, setSelectedNodes }) {\n\n    const [displayMapData, setDisplayMapData] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    let mapData = useRef(null)\n    let time = useRef(0)\n    let instance = useRef(null)\n\n    useEffect(() => {\n        setGraphData()\n    }, [])\n\n    useEffect(() => {\n        setIsLoading(true)\n        time.current = Date.now()\n        parseMapData()\n        setLayoutAndRender()\n    }, [graphData])\n\n    useEffect(() => {\n        if (!time.current) return\n        onNextFrame(() => {\n            console.log('time from getting data', Date.now()-time.current)\n            setIsLoading(false)\n        })\n    })\n\n    const onSelectNode = (a) => {\n        if (!a) {\n            setSelectedNodes(null)\n            return\n        }\n        const node = a[0]\n        getVariantEdges(node)\n    }\n\n    const traverseBranch = (node, onTraverse = () => {}) => {\n        // traverses a branch until it diverges\n\n        const getFirstParent = (node) => {\n            const incomers = getIncomers(node, displayMapData)\n            if (!incomers.length) return node\n            const incomerChildren = getOutgoers(incomers[0],displayMapData)\n            onTraverse(node)\n            if (incomerChildren.length > 1) return node\n            return getFirstParent(incomers[0])\n        }\n\n        const getLastChild = (node) => {\n            const outgoers = getOutgoers(node, displayMapData)\n            onTraverse(node)\n            if (outgoers.length === 1) return getLastChild(outgoers[0])\n            return node\n        }\n\n        const firstParent = getFirstParent(node)\n        const lastChild = getLastChild(node)\n\n        return {firstParent, lastChild}\n    }\n\n    function getVariantEdges(node) {\n        const variantNodes = []\n        const addNodeToVariant = (node) => {\n            const isNodeExist = !!variantNodes.find(variant => variant.id === node.id)\n            if (isNodeExist) return\n            variantNodes.push(node)\n        }\n        traverseBranch(node,addNodeToVariant)\n        setSelectedNodes(variantNodes)\n    }\n    function onNextFrame(callback) {\n        // called once the render is completed\n        setTimeout(function () {\n            requestAnimationFrame(callback)\n        })\n    }\n\n    const getLayoutedElements = (elements, direction = 'TB', nodeWidth, nodeHeight) => {\n        const dagreGraph = new dagre.graphlib.Graph();\n        dagreGraph.setDefaultEdgeLabel(() => ({}));\n\n        const isHorizontal = direction === 'LR';\n        dagreGraph.setGraph({ rankdir: direction });\n\n        elements.forEach((el) => {\n            if (isNode(el)) {\n                dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\n            } else {\n                dagreGraph.setEdge(el.source, el.target);\n            }\n        });\n\n        dagre.layout(dagreGraph);\n        const _elements = elements.map((el) => {\n            if (isNode(el)) {\n                const nodeWithPosition = dagreGraph.node(el.id);\n                el.targetPosition = isHorizontal ? 'left' : 'top';\n                el.sourcePosition = isHorizontal ? 'right' : 'bottom';\n\n                // unfortunately we need this little hack to pass a slightly different position\n                // to notify react flow about the change. Moreover we are shifting the dagre node position\n                // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n                el.position = {\n                    x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\n                    y: nodeWithPosition.y - nodeHeight / 2,\n                };\n            }\n\n            return el;\n        });\n        console.log('built graph', Date.now() - time.current)\n\n        return _elements\n    };\n\n    const setLayoutAndRender = () => {\n        if (!mapData.current) return\n        const _displayMap = getLayoutedElements(mapData.current, 'TB', 50, 50)\n        setDisplayMapData(_displayMap)\n    }\n\n    const onFinishLoadingMap = (ev) => {\n        instance.current = ev\n        console.log(Date.now()-time.current)\n    }\n\n    const onClickToObject = () => {\n        console.log(instance.current.toObject())\n    }\n\n    const parseMapData = () => {\n        const startTime = Date.now()\n        if (!graphData) return\n        const position = { x: 0, y: 0 };\n        const _parsedMapData = []\n        const graphRawData = graphData.data[0].graph\n        const edgeType = 'smoothstep';\n\n        Object.values(graphRawData.Edges).forEach(edge => {\n            const edgeData = {\n                id: edge.Id,\n                source: edge.From.Id,\n                target: edge.To.Id,\n                type: edgeType\n            }\n            _parsedMapData.push(edgeData)\n        })\n\n        Object.values(graphRawData.Vertices).forEach(node => {\n            const nodeData = {\n                type: 'special',\n                id: node.Id,\n                data: node,\n                position\n            }\n            _parsedMapData.push(nodeData)\n        })\n        \n        mapData.current = _parsedMapData\n        console.log('parsing the data took', Date.now() - startTime)\n    }\n\n    const nodeTypes = {\n        special: MapNode,\n    };\n\n    if (isLoading) return <div>Loading...</div>\n    if (!displayMapData) return <div />\n    \n    return (\n        <div style={{ height: '1000px', width: '1600px' }}>\n            <button onClick={setLayoutAndRender}>Reorganize</button>\n            <button onClick={onClickToObject}>to object</button>\n            <ReactFlow\n                elements={displayMapData}\n                nodeTypes={nodeTypes}\n                connectionLineType=\"smoothstep\"\n                onSelectionChange={onSelectNode}\n                onlyRenderVisibleElements={true}\n                minZoom={0.2}\n                onLoad={onFinishLoadingMap}\n            >\n            </ReactFlow>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { graphData } = state.graphReducer\n    return {\n        graphData\n    };\n};\n\nconst mapDispatchToProps = {\n    setGraphData,\n    setSelectedNodes\n}\n\nexport const MapContainer = connect(mapStateToProps, mapDispatchToProps)(_MapContainer);\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n\nfunction _SidebarContainer({isSidebarOpen}) {\n    return (\n        <div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {isSidebarOpen} = state.sidebarReducer\n    return {\n        isSidebarOpen\n    };\n};\n\nconst mapDispatchToProps = {\n\n}\n\nexport const SidebarContainer = connect(mapStateToProps,mapDispatchToProps)(_SidebarContainer);\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux';\nimport { setGraphData } from '../store/actions/graphActions'\n\nfunction _NodeGenerator({setGraphData}) {\n    const [amountOfNodes, setAmountOfNodes] = useState(100)\n\n    const onChangeAmountOfNodes = (ev) => {\n        const amount = +ev.target.value\n        if (isNaN(amount)) return\n        setAmountOfNodes(amount)\n    }\n\n\n    return (\n        <div>\n            <input value={amountOfNodes} onChange={onChangeAmountOfNodes} />\n            <button onClick={() => setGraphData(amountOfNodes)}>Redraw</button>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n};\n\nconst mapDispatchToProps = {\n    setGraphData,\n}\n\nexport const NodeGenerator = connect(mapStateToProps, mapDispatchToProps)(_NodeGenerator);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './store/store'\nimport {Provider} from \"react-redux\";\nimport { MapContainer } from './pages/MapContainer';\nimport { SidebarContainer } from './cmps/SidebarContainer';\nimport { NodeGenerator } from './cmps/NodeGenerator';\n\nReactDOM.render(\n  <Provider store={store}>\n      <NodeGenerator />\n      <MapContainer />\n      <SidebarContainer />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}